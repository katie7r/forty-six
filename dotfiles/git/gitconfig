[user]
	email = katie@cuttlesoft.com
  name = Katie Linero
[color]
  ui = true
[core]
  editor = vim
  autocrlf = input
[alias]
  co = checkout
  ci = commit
  st = status
  br = "!git --no-pager branch" # branch
  cb = checkout -b
  cp = cherry-pick
  up = "!f() { git remote update origin && git pull origin ${1:-'master'}; }; f"

  # ADDING/COMMITTING # # # # # # # # #

  amend = commit --amend -C HEAD
  addmend = "!f() { git add --all && git amend; }; f"
  unadd = reset
  uncommit = reset --soft HEAD^
  rollback = reset --hard
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged

  unstash = stash apply

  # NOTE: second arg can be either a commit hash or omitted (to include all commits from first arg)
  cherries-pick = "!f() { git cp $1^..${2:-$(git commit-from-branch $1)}; }; f"
  cps = cherries-pick

  # WIP (un)add/(un)commit all changes
  wip = commit --all -m "WIP" --no-verify
  unwip = "!f() { if [[ $(git log -1 --pretty=%B) == 'WIP' ]] ; then git uncommit && git unadd; else echo \"Not WIP commit\"; fi }; f"

  # DIFFS/COMPARISONS # # # # # # # # #

  diffs = diff --staged
  # show commits different between local and remote
  distance = "!f() { git --no-pager diff-compare --no-decorate HEAD...${1:-'origin'}/${2:-$(git rev-parse --abbrev-ref HEAD)}; }; f"
  # show last commit(s)  # TODO: default '1' if no $1 or if $1 is not int (e.g,, `git last master`, so don't have to `git last 1 master`)
  last = "!f() { git --no-pager log -${1:-'1'} ${2:-$(git rev-parse --abbrev-ref HEAD)}; }; f"
  # most recent commit
  latest = diff HEAD~1 HEAD

  # TODO: consolidate these into single alias, e.g., `git compare branch {branch} {--ff(/new/since)|--all}`
  diff-compare = log --oneline --graph --first-parent --left-right --decorate
  # these four aliases show commit diff between branches, with "<" and ">" indicating which branch
  compare = "!f() { git diff-compare $1..$2; }; f" # vs specified branch, new commits
  compare-all = "!f() { git diff-compare $1...$2; }; f" # vs specified branch, all commits
  compare-with = "!f() { git diff-compare HEAD..$2; }; f" # vs current branch, new commits
  compare-all-with = "!f() { git diff-compare HEAD...$2; }; f" # vs current branch, all commits

  # HISTORY # # # # # # # # # # # # # #

  hist = log --pretty=format:\"%C(dim)%h %ad |%Creset %s%d [%an]\" --graph --date=short
  # Time-based
  yesterday = "!f() { git --no-pager hist --since=yesterday.midnight --until=today.midnight $*; printf '\n'; }; f"
  today = "!f() { git --no-pager hist --since=today.midnight $*; printf '\n'; }; f"
  week = "!f() { git --no-pager hist --since='6 days ago' $*; printf '\n'; }; f" # e.g., `$ git week` on Friday will show from Saturday onward
  month = "!f() { git --no-pager hist --since='1 month ago' $*; printf '\n'; }; f"
  recent = "!f() { git --no-pager hist -${1:-'10'}; printf '\n'; }; f"
  # Only my commits  # TODO: pull author from config
  my = "!f() { git $* --author='katie'; }; f" # e.g., `git my week` or `git my last`

  # TODO: Change author name/email
  # (https://stackoverflow.com/questions/4981126/how-to-amend-several-commits-in-git-to-change-author)
  # TODO: option for `-- --all` (all commits) vs e.g., `HEAD~1..HEAD` (last 2 commits)
  # re-author = "!f() { git filter-branch --env-filter 'if [[ ${1} == "$2" ]]; then ${1}="$3"; fi' HEAD~1..HEAD; }; f"
  # # e.g., git author-name "Katie Russ" "Katie Linero"
  # author-name = "!f() { git re-author $GIT_AUTHOR_NAME "$1" "$2" && git re-author $GIT_COMMITTER_NAME "$1" "$2"; }; f"
  # # e.g., git author-email katie.k7r@gmail.com katie@cuttlesoft.com
  # author-email = "!f() { git re-author $GIT_AUTHOR_EMAIL $1 $2 && git re-author $GIT_COMMITTER_EMAIL $1 $2; }; f"

  # MISCELLANEOUS # # # # # # # # # # #

  # get the branch name for a commit (for cherry-picking ranges from one commit to the end, mostly)
  commit-from-branch = "!f() { CFB=$(git name-rev --name-only $1); echo ${CFB%~*}; }; f"

  # use subtree commands (add, pull) with defaults flags + args
  sub = "!f() { git subtree $1 --prefix $2 $3 master --squash; }; f"

  # use instead of push -f to ensure --force-with-lease
  force = push --force-with-lease
  # rebase to root, squashing all commits to a single one with the message given by the user, e.g., `$ git reboot "Starting fresh"`
  reboot = "!f() { git reset $(git commit-tree HEAD^{tree} -m '$1'); }; f"
  # for funsies
  ass = "!f() { echo \"Hey, now - thereâ€™s no need for name calling.\"; }; f"

  # DEFAULT ALIASES # # # # # # # # # #

  type = cat-file -t
  dump = cat-file -p
  unstage = reset HEAD --
  lol = log --oneline --graph
  co-master = !git checkout master && git submodule foreach git checkout master
  nuke = !git clean -fdx && git submodule foreach git clean -fdx
  sub-status = !git submodule foreach git status
  sync-subs = !git pull && git remote prune origin && git submodule foreach git pull && git submodule foreach git remote prune origin
  rmrbranch = push origin --delete  # <Branch-name> supplied by user
  rmrprune = remote prune origin

  # TODO: # # # # # # # # # # # # # # #

    # # Fetch and merge (e.g., local merge of PR from another remote)
    # fetch-merge = "!f() { git fetch $1 && git merge FETCH_HEAD; }; f"
