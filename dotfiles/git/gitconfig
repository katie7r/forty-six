[user]
  email = katie.k7r@gmail.com
  name = Katie Linero
[color]
  ui = true
[core]
  editor = vim
  autocrlf = input
[alias]
  br = !git --no-pager branch # branch
  cb = checkout -b
  cd = "!git checkout $(git default)"
  cf = commit --fixup
  cm = commit -m
  co = checkout
  cp = cherry-pick
  ff = "!git merge --ff-only ${1:-$(git default)}"
  ra = "!f() { git rebase --autosquash --interactive ${1:-$(git default)}; }; f" # autosquash with `cf`
  rb = rebase
  rd = "!git rebase $(git default)"
  st = status
  up = "!git remote update origin && git pull origin ${1:-$(git default)}" # TODO: current branch instead of default?

  # ADDING/COMMITTING # # # # # # # # #

  amend = commit --amend --no-edit
  addmend = !git add --all && git amend
  unadd = reset
  uncommit = reset --soft HEAD^
  rollback = reset --hard
  ignore = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged

  unstash = stash apply

  # NOTE: second arg can be either a commit hash or omitted (to include all commits from first arg)
  cherries-pick = "!git cp $1 && git cp $1..${2:-$(git commit-from-branch $1)}"
  cps = cherries-pick

  # WIP (un)add/(un)commit all changes
  wip = commit --all -m "WIP" --no-verify
  unwip = "!f() { if [[ $(git log -1 --pretty=%B) == 'WIP' ]] ; then git uncommit && git unadd; else echo \"Not WIP commit\"; fi }; f"

  # DIFFS/COMPARISONS # # # # # # # # #

  diffs = diff --staged
  # show commits different between local and remote
  distance = "!f() { git --no-pager diff-compare --no-decorate HEAD...${1:-'origin'}/${2:-$(git branch --show-current)}; }; f"
  # show last commit(s)  # TODO: default '1' if no $1 or if $1 is not int (e.g,, `git last master`, so don't have to `git last 1 master`)
  last = "!f() { git --no-pager log -${1:-'1'} ${2:-$(git branch --show-current)}; }; f"
  # most recent commit
  latest = diff HEAD~1 HEAD

  # TODO: consolidate these into single alias, e.g., `git compare branch {branch} {--ff(/new/since)|--all}`
  diff-compare = log --oneline --graph --first-parent --left-right --decorate
  # these four aliases show commit diff between branches, with "<" and ">" indicating which branch
  compare = "!git diff-compare $1..$2" # vs specified branch, new commits
  compare-all = "!git diff-compare $1...$2" # vs specified branch, all commits
  compare-with = "!git diff-compare HEAD..$2" # vs current branch, new commits
  compare-all-with = "!git diff-compare HEAD...$2" # vs current branch, all commits

  # HISTORY # # # # # # # # # # # # # #

  hist = log --pretty=format:\"%C(dim)%h %ad |%Creset %s%d [%an]\" --graph --date=short
  # Commits listed in reverse order (formatted for squash PR message), given the number of commits to include
  list = "!f() { git --no-pager log -$1 --reverse --pretty=tformat:'* %s'; }; f"
  # TODO: branch name arg to git list (e.g., git list 3 some-other-branch)
  # list = "!f() { if [[ $# -eq 1 ]]; then CHERRY=''; else CHERRY='--cherry '$(git default)'...${2}'; fi; git --no-pager log -$1 $CHERRY --reverse --pretty=tformat:'* %s'; }; f"
  # Time-based
  chrono = "!f() { git --no-pager hist $*; printf '\n'; }; f"
  yesterday = !git chrono --since=yesterday.midnight --until=today.midnight $*
  today = !git chrono --since=today.midnight  $*
  week = !git chrono --since=@{6.days.ago} $* # e.g., `$ git week` on Friday will show from Saturday onward
  month = !git chrono --since=@{1.month.ago} $*
  recent = !git chrono -${1:-'10'} $*
  # Only my commits  # TODO: pull author from config
  my = !git $* --author='katie' # e.g., `git my week` or `git my last`

  # MISCELLANEOUS # # # # # # # # # # #

  # get the branch name of the default branch
  default = "!git remote show ${1:-'origin'} | grep 'HEAD branch' | sed 's/.*: //'"

  # get the branches that match the given pattern
  branches = !git br | grep --color=always
  brs = branches

  # get the most recently-committed branches
  brecent = "!git for-each-ref --sort=-committerdate refs/heads --count=10 --color=always --format='%(color:black)%(committerdate:relative)|%(HEAD)%(color:green)%(refname:short)|%(color:white)%(subject)%(color:reset)' | column -ts'|'"
              # git for-each-ref --sort=-committerdate refs/heads --count=${1:-'7'} --color=always --format='' | column -ts'|'
              # --format='%(color:black)%(committerdate:relative)|%(HEAD)%(color:green)%(refname:short)|%(color:white)%(subject)%(color:reset)'

  # check out default branch, pull updates, re-checkout original branch, and rebase on default branch
  update = !git cd && git up && git co - && git rd
  # do ^that^, then force (with lease) push branch
  force-up = "!git update && git force ${1:-'origin'} ${2:-$(git branch --show-current)}"

  # check out copy of branch with current name prefixed with "BACKUP/" (or given prefix)
  backup = "!f() { git cb ${1:-'BACKUP'}/$(git branch --show-current) && git co -; }; f"

  # get the branch name for a commit (for cherry-picking ranges from one commit to the end, mostly)
  commit-from-branch = "!f() { CFB=$(git name-rev --name-only $1); echo ${CFB%~*}; }; f"

  # use subtree commands (add, pull) with defaults flags + args
  sub = "!git subtree $1 --prefix $2 $3 master --squash"

  # use instead of push -f to ensure --force-with-lease
  force = push --force-with-lease

  # rebase to root, squashing all commits to a single one with the message given by the user, e.g., `$ git reboot "Starting fresh"`
  reboot = "!git reset $(git commit-tree HEAD^{tree} -m '$1')"

  # for funsies
  ass = "!f() { echo \"Hey, now - thereâ€™s no need for name calling.\"; }; f"

  # CONDITIONAL / CASE-SPECIFIC # # # #

  # pull (with rebase) updates from specified (or current) branch and, if applicable, run rails migrations
  catch-up = "!f() { git remote update origin && git pull origin ${1:-$(git branch --show-current)} --rebase && if [[ $(git ls-tree -r --name-only $(git default) 'bin/rails') ]]; then bin/rails db:migrate; fi }; f"
  catchup = catch-up
  ketchup = catch-up

  # DEFAULT ALIASES # # # # # # # # # #

  type = cat-file -t
  dump = cat-file -p
  unstage = reset HEAD --
  lol = log --oneline --graph
  co-master = !git checkout master && git submodule foreach git checkout master
  nuke = !git clean -fdx && git submodule foreach git clean -fdx
  sub-status = !git submodule foreach git status
  sync-subs = !git pull && git remote prune origin && git submodule foreach git pull && git submodule foreach git remote prune origin
  rmrbranch = push origin --delete  # <Branch-name> supplied by user
  rmrprune = remote prune origin

  # TODO: # # # # # # # # # # # # # # #

    # # Change author name/email
    # # (https://stackoverflow.com/questions/4981126/how-to-amend-several-commits-in-git-to-change-author)
    # # + option for `-- --all` (all commits) vs e.g., `HEAD~1..HEAD` (last 2 commits)
    # re-author = "!f() { git filter-branch --env-filter 'if [[ ${1} == "$2" ]]; then ${1}="$3"; fi' HEAD~1..HEAD; }; f"
    # # e.g., git author-name "Katie Russ" "Katie Linero"
    # author-name = "!f() { git re-author $GIT_AUTHOR_NAME "$1" "$2" && git re-author $GIT_COMMITTER_NAME "$1" "$2"; }; f"
    # # e.g., git author-email katie.k7r@gmail.com katie@cuttlesoft.com
    # author-email = "!f() { git re-author $GIT_AUTHOR_EMAIL $1 $2 && git re-author $GIT_COMMITTER_EMAIL $1 $2; }; f"

    # # Fetch and merge (e.g., local merge of PR from another remote)
    # fetch-merge = "!f() { git fetch $1 && git merge FETCH_HEAD; }; f"
